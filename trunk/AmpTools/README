//******************************************************************************
//
// See individual source files for licesnse information.
// 
// This software written by Matthew Shepherd, Ryan Mitchell, and 
//                  Hrayr Matevosyan at Indiana University, Bloomington and
//                  Lawrence Gibbons at Cornell University
//
//******************************************************************************

INSTALLATION AND USE:

This package depends on CLHEP.  You should set the environment variable
CLHEP_INCLUDE_DIR to point to the CLHEP include directory, for example
/usr/local/CLHEP/include

This package also depends on ROOT.  Be sure that ROOTSYS points to your ROOT 
installation.

Typing 'make' will build the package and produce a single static library, 
libAmpTools.a, that can be linked by external packages.  To access the include 
files, it is recommended one add the path to this top level directory in the
-I flag to gcc.  Once this is done, files can be included in code by typing, 
for example, '#include "IUAmpTools/AmplitudeManager.h"'.

Support for computing amplitudes on graphics cards can be enabled by
typing 'make GPU=1'.  In this case CUDA_INSTALL_PATH should point to your
installation of CUDA and you may need to adjust the CUDA_FLAGS variable in 
the Makefile for your particular hardware.

RELEASE NOTES:

[current subversion... unreleased -- **modify this with release date**]

Add new "scale" command to the config file and AmplitudeManager that
allows rescaling an amplitude by a constant or a fit parameter.

Add option to the AmplitudeManager to renormalize the amplitudes.  This
scales each amplitude such that the absolute square of the production
parameter (output of MINUIT) is equal to the number of events associated
with this amplitude.  This provides a more "natural" scale for the fit
parameters, but it should be used with caution with the constrain command
as it will will constrain two amplitudes to have the same number of events
(modulo the set "scale" factor).

Defined new AmpToolsInterface class to create and manage all of the supporting
objects needed for a fit.  This greatly improves the user experience.
(See documentation.)

Created templates UserDataReader and UserAmplitude for user defined classes in
order to reduce the amount of code that user has to write.  (See documentation.)

Fixed MinuitIterface and URMinuit to properly use the maximum number of iterations
set by the user (default of 500) for certain MINUIT commands (hesse, minos, migrad).

v0.4 (11-July-2012):

Fixed GPU manager to correctly report the number of cores on various new
GPU hardware (with a fix from R.T. Jones).

Corrected a factor of 2 and sign mistake in the calculation of errors
on the intensity in the PlotGenerator.

Fixed a bug in the PlotGenerator that didn't allow enabling and disabling
of amplitudes.

v0.3 (16-January-2011):

Improved reduction kernel for doing double-precision sums on the GPU.  This
was causing double precision computation to fail on newer Tesla GPUs.  No trouble
is seen now.  Doing sums on GPU seems to show minimal speed improvements.  
Further optimization is likely needed.  This version also implements callbacks
to amplitudes when parameters change in MPI-based fits.  In addition, a new
init() method is provided in the Amplitude class that users can override.  The
init() method allows the user to make expensive initial computations *after*
the initial values of the parameters have been set.  Doing these computations
in the constructor for amplitudes with free parameters is not recommended since
the free parameters will be set to some default value of 1E9.

v0.2 (4-January-2011):

Fixed bad memory handling bug that would cause corrupt amplitude calculation
for a fit that had an amplitude with free parameters.  Users should be 
skeptical of fits done with free amplitude parameters with version 0.1.

v0.1 (2-January-2011):

First publicly available experimental version.  The package has been in
private testing for a long period of time.  Some aspects of the MPI implementation
still need refinement.  Callbacks to the amplitudes on a change of parameters
have not been enabled by the ParameterManagerMPI.  In addition, the MPI+GPU
features have not been tested.  For example, the code needs to learn how to
select the correct GPU on a multi-GPU fit.

