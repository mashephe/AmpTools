//******************************************************************************
//
// See individual source files for license information.
// 
// This software written by Matthew Shepherd, Ryan Mitchell, and 
//                  Hrayr Matevosyan at Indiana University, Bloomington and
//                  Lawrence Gibbons at Cornell University
//
//******************************************************************************

INSTALLATION AND USE:

This package depends on CLHEP.  You should set the environment variable
CLHEP_INCLUDE_DIR to point to the CLHEP include directory, for example
/usr/local/CLHEP/include

This package also depends on ROOT.  Be sure that ROOTSYS points to your ROOT 
installation.

Typing 'make' will build the package and produce a single static library, 
libAmpTools.a, that can be linked by external packages.  To access the include 
files, it is recommended one add the path to this top level directory in the
-I flag to gcc.  Once this is done, files can be included in code by typing, 
for example, '#include "IUAmpTools/AmplitudeManager.h"'.

Support for computing amplitudes on graphics cards can be enabled by
typing 'make GPU=1'.  In this case CUDA_INSTALL_PATH should point to your
installation of CUDA and you may need to adjust the CUDA_FLAGS variable in 
the Makefile for your particular hardware.

KNOWN ISSUES/FUTURE DEVELOPMENT:

(0) Building can sometimes be cantankerous.  We are in need of a configure
system.  Common mistakes are inadvertently mixing 32-bit and 64-bit code
due to different complier options.  Check library paths in top-level Makefiles.  
The GPU hardware versions also need to be hard coded in Makefiles.

(1) Error propagation in some cases is unreliable.  Fit parameters and
covariance matrices are correct, but computation of intensity and fit
fractions that are printed in some examples do not properly account for
parameter covariances.  IF RELIABLE ERRORS ARE NEEDED, IT IS ADVISED
TO DO YOUR OWN ERROR PROPAGATION USING THE FIT PARAMETERS AND COVARIANCE
MATRIX, rather than rely on the examples. (see note 2)

(2) FitResults:  currently there is redundant fit output.  The old scheme
is to write out a parameter file and a normalization integral file.  This
is still supported by AmpToolsInterface.  AmpToolsInterface will also dump
the FitResults object to a file, which contains all the necessary info
in a single file with a user interface.  Many of the calculations in
PlotGenerator need to be transferred to the FitResults and proper error
propagation (including correlations) needs to be done.  Eventually the
old scheme of producing both an integral and parameter file will be
deprecated.

(3) Capability to renormalize amplitudes to unity is disabled.  
In general, this feature requires a modification of the NormIntInterface 
to cache the generated MC throughout the fit, as it is needed to recalculate the
acceptance-corrected amplitude integral to do the normalization.  
This integral not constant if the amplitude contains free parameters, and
therefore the generated MC is needed at every fit iteration.  
(Currently the generated MC is flushed after initialization and 
only the accepted MC is maintained to save memory.)  If amplitudes
do not have free parameters, users can experiment with this feature by
uncommenting the renormalizeAmps method in the AmplitudeManager.
Do not use for fits with free parameters in amplitudes until a fix is made.

(4) Support for moment fits: a future version will include the capability
to fit data to a sum of moments.  Currently the only supported scheme
is fitting to multiple coherent sums of amplitudes.

RELEASE NOTES:

v0.5 (16-Nov-2012):

Bundled both Tutorials and AmpPlotter (GUI) with the package. See
README files in those directories.

Created a new FitResults object to store the results of a fit.  It can
be written to and read from a text file.  This should provide a nice user
interface to all information about the fit.  Some features are still
under development (see note 2 at the top of the file).

Fixed UpRootMinuit module to obey the setMaxIterations command through
the MinuitMinimizationManager.  The default max iterations has been
set to 5000.  It was previously unset.

Fixed bug in MinuitParameterManager that causes the error matrix to
be incorrectly "dimensioned" in the case that one of the amplitude
parameters is fixed.

Add new "scale" command to the config file and AmplitudeManager that
allows rescaling an amplitude by a constant or a fit parameter.

Add option to the AmplitudeManager to renormalize the amplitudes.  This
scales each amplitude such that the absolute square of the production
parameter (output of MINUIT) is equal to the number of events associated
with this amplitude.  This provides a more "natural" scale for the fit
parameters, but it should be used with caution with the constrain command
as it will will constrain two amplitudes to have the same number of events
modulo the set "scale" factor. (CODED BUT DISABLED: see note 3 above.)

Defined new AmpToolsInterface class to create and manage all of the supporting
objects needed for a fit.  This greatly improves the user experience.
(See documentation or tutorials.)

Created templates UserDataReader and UserAmplitude for user defined classes in
order to reduce the amount of code that user has to write.  
(See documentation or tutorials.)

Fixed MinuitIterface and URMinuit to properly use the maximum number of iterations
set by the user (default of 5000) for certain MINUIT commands (hesse, minos, migrad).

v0.4 (11-July-2012):

Fixed GPU manager to correctly report the number of cores on various new
GPU hardware (with a fix from R.T. Jones).

Corrected a factor of 2 and sign mistake in the calculation of errors
on the intensity in the PlotGenerator.

Fixed a bug in the PlotGenerator that didn't allow enabling and disabling
of amplitudes.

v0.3 (16-January-2011):

Improved reduction kernel for doing double-precision sums on the GPU.  This
was causing double precision computation to fail on newer Tesla GPUs.  No trouble
is seen now.  Doing sums on GPU seems to show minimal speed improvements.  
Further optimization is likely needed.  This version also implements callbacks
to amplitudes when parameters change in MPI-based fits.  In addition, a new
init() method is provided in the Amplitude class that users can override.  The
init() method allows the user to make expensive initial computations *after*
the initial values of the parameters have been set.  Doing these computations
in the constructor for amplitudes with free parameters is not recommended since
the free parameters will be set to some default value of 1E9.

v0.2 (4-January-2011):

Fixed bad memory handling bug that would cause corrupt amplitude calculation
for a fit that had an amplitude with free parameters.  Users should be 
skeptical of fits done with free amplitude parameters with version 0.1.

v0.1 (2-January-2011):

First publicly available experimental version.  The package has been in
private testing for a long period of time.  Some aspects of the MPI implementation
still need refinement.  Callbacks to the amplitudes on a change of parameters
have not been enabled by the ParameterManagerMPI.  In addition, the MPI+GPU
features have not been tested.  For example, the code needs to learn how to
select the correct GPU on a multi-GPU fit.

